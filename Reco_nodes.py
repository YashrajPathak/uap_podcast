"""
nodes.py â€” Core LLM-powered functions for RecoAgent.

This module handles:
- Generating Reco's dynamic recommendation responses
- Processing conversation context
- Preparing prompt construction and interaction logic
"""

import asyncio
from typing import List, Dict, Any

from uap_podcast.models.podcast import llm
from uap_podcast.agents.reco_agent.utils.state import SYSTEM_RECO
from uap_podcast.agents.reco_agent.utils.tools import (
    ensure_complete_response,
    vary_opening,
    add_conversation_dynamics,
    add_emotional_reactions,
    clean_repetition
)


async def generate_reco_response(
    context: str,
    nexus_intro: str,
    conversation_history: List[str],
    last_openings: Dict[str, str],
    last_speaker: str,
    turn_index: int
) -> str:
    """
    ðŸŽ¯ Generate a RecoAgent response based on context, Nexus intro, and previous dialogue.

    Args:
        context: Full dataset context from input files.
        nexus_intro: Introduction text generated by Nexus agent.
        conversation_history: Recent conversation lines for continuity.
        last_openings: Dict tracking last used openers to avoid repetition.
        last_speaker: Last speaker's name to shape dynamics.
        turn_index: Current turn count (used for variation).

    Returns:
        str: Final, polished RecoAgent response.
    """

    # Construct the prompt
    reco_prompt = (
        f"Context: {context}\n\n"
        f"Nexus just introduced these topics: {nexus_intro}\n\n"
        f"Previous conversation: {conversation_history[-2:] if len(conversation_history) > 1 else 'None'}\n\n"
        f"Provide your recommendation based on the data and topics introduced."
    )

    # Generate raw response
    response = await llm(SYSTEM_RECO, reco_prompt)

    # âœ¨ Post-processing: Make the response more conversational and natural
    response = vary_opening(response, "RECO", last_openings)
    response = add_conversation_dynamics(response, "RECO", last_speaker, context, turn_index, conversation_history)
    response = add_emotional_reactions(response, "RECO")
    response = clean_repetition(response)
    response = ensure_complete_response(response)

    return response


# ---------- Optional utility wrapper for testing or standalone run ----------

if __name__ == "__main__":
    async def _test_reco_node():
        sample_context = "[Demo] Sample metric data here..."
        sample_intro = "Today weâ€™re focusing on ASA trends and call duration anomalies."
        history = ["Nexus: Welcome", "Reco: Let's start."]
        result = await generate_reco_response(
            context=sample_context,
            nexus_intro=sample_intro,
            conversation_history=history,
            last_openings={},
            last_speaker="Nexus",
            turn_index=1
        )
        print("Reco Response:", result)

    asyncio.run(_test_reco_node())
